{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "env_name": {
            "type": "string",
            "allowedValues":[
                "dev",
                "stg",
                "prd"
            ]
        },
        "env_key":{
            "type": "string",
            "defaultValue": "01"

        },
        "azure_location": {
            "type": "string",
            "defaultValue": "eastus2"
        },
        "region_abbrevation":{
            "type": "string",
            "defaultValue": "eus2"
        },

        "resource_version":{
            "type": "string",
            "defaultValue": "01"
        }
        },
    "variables": {
    "subscriptionid": "[subscription().subscriptionId]",
    "sharedresourcegroupname": "[resourcegroup().name]",
    "environmentnamekey": "[concat(parameters('env_name'),parameters('env_key'))]",
    "linuxresourcegroupname": "[concat('AppGrp-lnx',parameters('resource_version'),'-',parameters('env_name'),parameters('env_key'),'-rg')]",
    "linuxbluefunctionappname": "[concat(parameters('region_abbrevation'),'-lnx',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-linux-fa-blue')]",
    "linuxgreenfunctionappname": "[concat(parameters('region_abbrevation'),'-lnx',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-linux-fa-green')]",
    "corefabluename":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-core-fa-blue')]",
    "corefagreenname":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-core-fa-green')]",
    "corebluefunctionappurl": "[concat('https://',variables('corefabluename'),'.azurewebsites.net' )]",
    "coregreenfunctionappurl": "[concat('https://',variables('corefagreenname'),'.azurewebsites.net' )]",
    "gqlgatefabluename":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-gql-gate-fa-blue')]",
    "gqlgatefagreenname":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-gql-gate-fa-blue')]",
    "gqlgatebluefunctionappurl": "[concat('https://',variables('gqlgatefabluename'),'.azurewebsites.net' )]",
    "gqlgategreenfunctionappurl": "[concat('https://',variables('gqlgatefagreenname'),'.azurewebsites.net' )]",
    "notificationsfabluename":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-notifications-fa-blue')]",
    "notificationsfagreenname":"[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',variables('environmentnamekey'),'-notifications-fa-green')]",
    "notificationsfablueurl":"[concat('https://',variables('notificationsfabluename'),'.azurewebsites.net' )]",
    "notificationsfagreenurl":"[concat('https://',variables('notificationsfagreenname'),'.azurewebsites.net' )]",
    "mulresourcegroupname": "[concat('AppGrp-mul',parameters('resource_version'),'-',parameters('env_name'),parameters('env_key'),'-rg')]",
    "airesourcegroupname": "[concat('AppGrp-ai01-',parameters('env_name'),parameters('env_key'),'-rg')]",
    "authresourcegroupname": "[concat('AppGrp-auth01-',parameters('env_name'),parameters('env_key'),'-rg')]",
    "authfunctionappname": "[concat(parameters('region_abbrevation'),'-','auth',parameters('resource_version'),'auth',parameters('resource_version'),'-',parameters('env_name'),parameters('env_key'),'-fa')]",
    "authfunctionappurl": "[concat('https://',variables('authfunctionappname'),'.azurewebsites.net' )]",
    "mulaifunctionaappname": "[concat(parameters('region_abbrevation'),'-mul01func01-',parameters('env_name'),parameters('env_key'),'-ai-fa')]",
    "mulaifunctionappurl": "[concat('https://',variables('mulaifunctionaappname'),'.azurewebsites.net' )]",
    "muldatareplayfunctionappname": "[concat(parameters('region_abbrevation'),'-mul',parameters('resource_version'),'func',parameters('resource_version'),'-',parameters('env_name'),parameters('env_key'),'-data-replay-fa')]",
    "muldatareplayfunctionappurl": "[concat('https://',variables('muldatareplayfunctionappname'),'.azurewebsites.net' )]",
    "existingapimsharedresourceprefix": "[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('sharedresourcegroupname'),'/providers/Microsoft.ApiManagement/service/')]",
    "apimname": "[concat('shared-', parameters('env_name'),parameters('env_key'),'-api')]",
    "apimresourceid": "[concat(variables('existingapimsharedresourceprefix'),variables('apimname'))]",
    "apimvnetname": "[concat(parameters('region_abbrevation'),'-shared-',parameters('env_name'),parameters('env_key'),'-vnet')]",
    "apimvnetandsubnetresourceid": "[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('sharedresourcegroupname'),'/providers/Microsoft.Network/virtualNetworks/', variables('apimvnetname'),'/subnets/shared_subnet01')]",
    "authbackendresourceid":"[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('authresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('authfunctionappname'))]",
    "authfaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('authresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('authfunctionappname'))]",
    "linuxbluefabackendresourceid": "[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('linuxresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('linuxbluefunctionappname'))]",
    "linuxgreenfabackendresourceid": "[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('linuxresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('linuxgreenfunctionappname'))]",
    "corebluefabackendresourceid": "[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('corefabluename'))]",
    "coregreenfabackendresourceid":"[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('corefagreenname'))]",
    "gqlgatebluefabackendresourceid": "[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('gqlgatefabluename'))]",
    "gqlgategreenfabackendresourceid": "[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('gqlgatefagreenname'))]",
    "notificationsbluefabackendresourceid":"[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('notificationsfabluename'))]",
    "notificationsgreenfabackendresourceid":"[concat('https://management.azure.com/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('notificationsfagreenname'))]",
    "linuxbluefaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('linuxresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('linuxbluefunctionappname'))]",
    "linuxgreenfaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('linuxresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('linuxgreenfunctionappname'))]",
    "corebluefaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('corefabluename'))]",
    "coregreenfaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('corefagreenname'))]",
    "gqlgategreenfaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('gqlgatefagreenname'))]",
    "gqlgatebluefaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('gqlgatefabluename'))]",
    "notificationbluefaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('notificationsfabluename'))]",
    "notificationgreenfaresourceid":"[concat('/subscriptions/',variables('subscriptionid'),'/resourceGroups/',variables('mulresourcegroupname'),'/providers/Microsoft.Web/sites/',variables('notificationsfagreenname'))]"

    },
    "resources": [

        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "alert API",
                "apiRevision": "1",
                "description": "alert Service service endpoint",
                "subscriptionRequired": false,
                "path": "alerts",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "analytics-blue",
                "apiRevision": "1",
                "description": "Core endpoint",
                "subscriptionRequired": false,
                "path": "blue/analytics",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "analytics-green",
                "apiRevision": "1",
                "description": "Core endpoint",
                "subscriptionRequired": false,
                "path": "green/analytics",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/audit-logs-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Audit logs API",
                "apiRevision": "1",
                "description": "Audit log service endpoint",
                "subscriptionRequired": false,
                "path": "auditLogs",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api')]",
            "dependsOn": [
            ],
            "properties": {
                "displayName": "Auth API",
                "apiRevision": "1",
                "description": "Auth REST API",
                "subscriptionRequired": false,
                "path": "auth",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-backend')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "title": "[variables('authfunctionappname')]",
                "url": "[concat(variables('authfunctionappurl'),'/api')]",
                "protocol": "http",
                "resourceId": "[variables('authbackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{auth-key}}"
                        ]
                    }
                }
            }
        },

        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "IoT Config API",
                "apiRevision": "1",
                "description": "IoT Config service endpoint",
                "subscriptionRequired": false,
                "path": "config",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-blue",
                "apiRevision": "1",
                "description": "Core endpoint",
                "subscriptionRequired": false,
                "path": "blue/core",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-green",
                "apiRevision": "1",
                "description": "Core endpoint",
                "subscriptionRequired": false,
                "path": "green/core",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Dataview API",
                "apiRevision": "1",
                "description": "Dataview service endpoint",
                "subscriptionRequired": false,
                "path": "dataviews",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "device-provision-blue",
                "apiRevision": "1",
                "description": "[variables('linuxbluefunctionappname')]",
                "subscriptionRequired": false,
                "path": "blue/api",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "device-provision-green",
                "apiRevision": "1",
                "description": "[variables('linuxgreenfunctionappname')]",
                "subscriptionRequired": false,
                "path": "green/api",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api')]",
            "dependsOn": [
            ],
            "properties": {
                "displayName": "Echo API",
                "apiRevision": "1",
                "subscriptionRequired": true,
                "serviceUrl": "http://echoapi.cloudapp.net/api",
                "path": "echo",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Equipment Rules API",
                "apiRevision": "1",
                "description": "Equipment rules service endpoint",
                "subscriptionRequired": false,
                "path": "equipmentRules",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "equipment-blue",
                "apiRevision": "1",
                "description": "Equipment service endpoint",
                "subscriptionRequired": false,
                "path": "blue/equipments",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "equipment-green",
                "apiRevision": "1",
                "description": "Equipment service endpoint",
                "subscriptionRequired": false,
                "path": "green/equipments",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Event API",
                "apiRevision": "1",
                "description": "Event Service service endpoint",
                "subscriptionRequired": false,
                "path": "events",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gateways-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Gateway API",
                "apiRevision": "1",
                "description": "Gateway service endpoint",
                "subscriptionRequired": false,
                "path": "gateways",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "graphql-blue",
                "apiRevision": "1",
                "description": "GraphQL API",
                "subscriptionRequired": false,
                "path": "blue/graphql",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "graphql-green",
                "apiRevision": "1",
                "description": "GraphQL API",
                "subscriptionRequired": false,
                "path": "green/graphql",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "navigation-blue",
                "apiRevision": "1",
                "description": "Navigation service endpoint",
                "subscriptionRequired": false,
                "path": "blue/navigation",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "navigation-green",
                "apiRevision": "1",
                "description": "Navigation service endpoint",
                "subscriptionRequired": false,
                "path": "green/navigation",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notification-blue",
                "apiRevision": "1",
                "description": "Foundations Notification REST API",
                "subscriptionRequired": false,
                "path": "blue/notification",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notification-green",
                "apiRevision": "1",
                "description": "Foundations Notification REST API",
                "subscriptionRequired": false,
                "path": "green/notification",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "partner-blue",
                "apiRevision": "1",
                "description": "Partner service endpoint",
                "subscriptionRequired": false,
                "path": "blue/partner",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "partner-green",
                "apiRevision": "1",
                "description": "Partner service endpoint",
                "subscriptionRequired": false,
                "path": "green/partner",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "rule API",
                "apiRevision": "1",
                "description": "rule Service service endpoint",
                "subscriptionRequired": false,
                "path": "rules",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "team API",
                "apiRevision": "1",
                "description": "team Service service endpoint",
                "subscriptionRequired": false,
                "path": "teams",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "users-blue",
                "apiRevision": "1",
                "description": "Users service endpoint",
                "subscriptionRequired": false,
                "path": "blue/users",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "users-green",
                "apiRevision": "1",
                "description": "Users service endpoint",
                "subscriptionRequired": false,
                "path": "green/users",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-blue-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "validation-blue",
                "apiRevision": "1",
                "description": "Validations service endpoint",
                "subscriptionRequired": false,
                "path": "blue/validations",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-green-api')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "validation-green",
                "apiRevision": "1",
                "description": "Validations service endpoint",
                "subscriptionRequired": false,
                "path": "green/validations",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/loggers",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/azuremonitor')]",
            "dependsOn": [
            ],
            "properties": {
                "loggerType": "azureMonitor",
                "isBuffered": true
            }
        },
       /* {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-alerts-fa",
                "url": "https://eus2-mul01func01-dev02-alerts-fa.azurewebsites.net/api/alerts",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-alerts-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{alerts-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
                "url": "[concat(variables('corebluefunctionappurl'),'/blue/analytics')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
                "url": "[concat(variables('coregreenfunctionappurl'),'/green/analytics')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/audit-logs-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/auditLogs",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-sensor-fa",
                "url": "https://eus2-mul01func01-dev02-sensor-fa.azurewebsites.net/api/config",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-sensor-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{sensor-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
                "url": "[concat(variables('corebluefunctionappurl'),'/api/core')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
                "url": "[concat(variables('coregreenfunctionappurl'),'/api/core')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },
      /*  {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataview-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/dataviews",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/equipmentRules",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/equipments",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
                "url": "[concat(variables('corebluefunctionappurl'),'/api/equipments')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
                "url": "[concat(variables('coregreenfunctionappurl'),'/api/equipments')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),'/', variables('linuxbluefunctionappname'))]",
            "dependsOn": [
                 
            ],
            "properties": {
                "description": "eus2-lnx01func01-dev02-linux-fa-blue",
                "url": "[concat('https://',variables('linuxbluefunctionappname'),'/api')]",
                "protocol": "http",
                "resourceId": "[variables('linuxbluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "[listkeys(concat(variables('linuxbluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),'/', variables('linuxgreenfunctionappname'))]",
            "dependsOn": [
                 
            ],
            "properties": {
                "description": "eus2-lnx01func01-dev02-linux-fa-green",
                "url": "[concat('https://',variables('linuxgreenfunctionappname'),'/api')]",
                "protocol": "http",
                "resourceId": "[variables('linuxgreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "[listkeys(concat(variables('linuxgreenfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-event-processing-fa",
                "url": "https://eus2-mul01func01-dev02-event-processing-fa.azurewebsites.net/api/events",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-event-processing-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{event-processing-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gateways-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-sensor-fa",
                "url": "https://eus2-mul01func01-dev02-sensor-fa.azurewebsites.net/api/gateways",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-sensor-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{sensor-key}}"
                        ]
                    }
                }
            }
        },*/
        /*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-gql-gate-fa",
                "url": "https://eus2-mul01func01-dev02-gql-gate-fa.azurewebsites.net/api/graphql",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-gql-gate-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{gql-gate-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('gqlgatefabluename')]",
                "url": "[concat('https://',variables('gqlgatebluefunctionappurl'),'/api/graphql')]",
                "protocol": "http",
                "resourceId": "[variables('gqlgatebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{gql-gate-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('gqlgatefagreenname')]",
                "url": "[concat('https://',variables('gqlgategreenfunctionappurl'),'/api/graphql')]",
                "protocol": "http",
                "resourceId": "[variables('gqlgategreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{gql-gate-green-key}}"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/groups-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/groups",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/navigation",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
                "url": "[concat(variables('corebluefunctionappurl'),'/api/navigation')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
                "url": "[concat(variables('coregreenfunctionappurl'),'/api/navigation')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('notificationsfabluename')]",
                "url": "[concat(variables('notificationsfablueurl'),'/api/notification')]",
                "protocol": "http",
                "resourceId": "[variables('notificationsbluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{notifications-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('notificationsfabluename')]",
                "url": "[concat(variables('notificationsfablueurl'),'/api/notification')]",
                "protocol": "http",
                "resourceId": "[variables('notificationsbluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{notifications-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('notificationsfagreenname')]",
                "url": "[concat(variables('notificationsfagreenurl'),'/api/notification')]",
                "protocol": "http",
                "resourceId": "[variables('notificationsgreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{notifications-green-key}}"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/opfiles-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-custom-exporter-fa",
                "url": "https://eus2-mul01func01-dev02-custom-exporter-fa.azurewebsites.net/api/opfiles",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-custom-exporter-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{custom-exporter-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/partner",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
		        "url": "[concat(variables('corebluefunctionappurl'),'/api/partner')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
		        "url": "[concat(variables('coregreenfunctionappurl'),'/api/partner')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/roles-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/roles",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-alerts-fa",
                "url": "https://eus2-mul01func01-dev02-alerts-fa.azurewebsites.net/api/rules",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-alerts-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{alerts-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/sites-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/sites",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-alerts-fa",
                "url": "https://eus2-mul01func01-dev02-alerts-fa.azurewebsites.net/api/teams",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-alerts-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{alerts-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/users",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
                "url": "[concat(variables('corebluefunctionappurl'),'/api/users')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
                "url": "[concat(variables('coregreenfunctionappurl'),'/api/users')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-backend')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "eus2-mul01func01-dev02-user-fa",
                "url": "https://eus2-mul01func01-dev02-user-fa.azurewebsites.net/api/validations",
                "protocol": "http",
                "resourceId": "https://management.azure.com/subscriptions/7561e71a-f6ea-4fbb-b139-801780a9d29d/resourceGroups/AppGrp-mul01-dev02-rg/providers/Microsoft.Web/sites/eus2-mul01func01-dev02-user-fa",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{user-management-key}}"
                        ]
                    }
                }
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-blue')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefabluename')]",
		        "url": "[concat(variables('corebluefunctionappurl'),'/api/validations')]",
                "protocol": "http",
                "resourceId": "[variables('corebluefabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-blue-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-green')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "title": "[variables('corefagreenname')]",
		         "url": "[concat(variables('coregreenfunctionappurl'),'/api/validations')]",
                "protocol": "http",
                "resourceId": "[variables('coregreenfabackendresourceid')]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "{{core-green-key}}"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/groups",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/administrators')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Administrators",
                "description": "Administrators is a built-in group. Its membership is managed by the system. Microsoft Azure subscription administrators fall into this group.",
                "type": "system"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/groups",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/guests')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Guests",
                "description": "Guests is a built-in group. Its membership is managed by the system. Unauthenticated users visiting the developer portal fall into this group.",
                "type": "system"
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alerts-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "alerts-key",
                "secret": true
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-AmazonNA-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-amazonna-key",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"

            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-Crocs-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-crocs-key",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-datarelay-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-datarelay-key",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-demo2-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-demo2-key",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-Demo-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-Demo-key",
                "tags": [
                    "auth",
                    "secret",
                    "key"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-key",
                "tags": [],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-nordstrom-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-nordstrom-key",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-blue-key",
                "secret": true,
                "value":"[listkeys(concat(variables('corebluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-green-key",
                "secret": true,
                "value":"[listkeys(concat(variables('coregreenfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/custom-exporter-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "custom-exporter-key",
                "secret": true,
                "value":"[listkeys(concat(variables('authfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"

            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/eus2-lnx01func01-dev02-linux-fa-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "eus2-lnx01func01-dev02-linux-fa-blue-key",
                "tags": [
                    "key",
                    "function",
                    "auto"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('linuxbluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/eus2-lnx01func01-dev02-linux-fa-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "eus2-lnx01func01-dev02-linux-fa-green-key",
                "tags": [
                    "key",
                    "function",
                    "auto"
                ],
                "secret": true,
                "value":"[listkeys(concat(variables('linuxgreenfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
      /*  {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-processing-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "event-processing-key",
                "secret": true
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/frontdoor-id')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "frontdoor-id",
                "tags": [
                    "frontdoor",
                    "policy",
                    "apim"
                ],
                "secret": true,
                "value": "3614069d-bff5-425c-916d-a33c357d0a95"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/frontdoor-id-prem')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "frontdoor-id-prem",
                "tags": [
                    "frontdoor",
                    "policy",
                    "apim"
                ],
                "secret": true,
                "value": "3614069d-bff5-425c-916d-a33c357d0a95"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gql-gate-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-blue-key",
                "secret": true,
                "value":"[listkeys(concat(variables('gqlgatebluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gql-gate-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-green-key",
                "secret": true,
                "value":"[listkeys(concat(variables('gqlgategreenfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"

            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gql-gate-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-key",
                "secret": true,
                "value":"[listkeys(concat(variables('gqlgatebluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notifications-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-blue-key",
                "secret": true,
                "value":"[listkeys(concat(variables('notificationbluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notifications-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-green-key",
                "secret": true,
                "value":"[listkeys(concat(variables('notificationgreenfaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notifications-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-key",
                "secret": true,
                "value":"[listkeys(concat(variables('notificationbluefaresourceid'), '/host/default/'),'2016-08-01').functionKeys.default]"
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/sensor-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "sensor-key",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/user-management-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-blue-key",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/user-management-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-green-key",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/namedValues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/user-management-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-key",
                "secret": true
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/AccountClosedPublisher')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/BCC')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/NewApplicationNotificationMessage')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/NewIssuePublisherNotificationMessage')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/PurchasePublisherNotificationMessage')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/QuotaLimitApproachingPublisherNotificationMessage')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/notifications",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/RequestPublisherNotificationMessage')]",
            "dependsOn": [
                 
            ]
        },
        {
            "type": "Microsoft.ApiManagement/service/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound />\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/portalsettings",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/signin')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "enabled": false
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/portalsettings",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/signup')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "enabled": true,
                "termsOfService": {
                    "enabled": false,
                    "consentRequired": false
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/products",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/starter')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Starter",
                "description": "Subscribers will be able to run 5 calls/minute up to a maximum of 100 calls/week.",
                "subscriptionRequired": true,
                "approvalRequired": false,
                "subscriptionsLimit": 1,
                "state": "published"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/products",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/unlimited')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "Unlimited",
                "description": "Subscribers have completely unlimited access to the API. Administrator approval is required.",
                "subscriptionRequired": true,
                "approvalRequired": true,
                "subscriptionsLimit": 1,
                "state": "published"
            }
        },/*
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/alerts-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "alerts-key",
                "value": "gP/p1OiagIVTW04jH8aetmbpJJMzZHIe7cF3nr88ZCm40IoN8pjEJA==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-AmazonNA-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-amazonna-key",
                "value": "cm40aEhhdjBCUU1zTUhQVWkyZFlQc2VvclVidWQ0bGpwRg==",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-Crocs-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-crocs-key",
                "value": "WGdiTUkyTTk1SXlqRG1HNTd6NWRBWmpUdkpkVll2VXlNbg==",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-datarelay-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-datarelay-key",
                "value": "ZjRuQjBHVzVRREdRM0EwaTF3dEVaUTRBMDhPM3VYa3dQdw==",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-demo2-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-demo2-key",
                "value": "cHpNVXpIendZZENWVlpIblpGSjJrRnZCRlR0YnA5Y1Axcg==",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-Demo-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-Demo-key",
                "value": "SXQyMzRCNHJjV21pQjU2NzlybkRFZU1mZDhsSFV4aUNk",
                "tags": [
                    "auth",
                    "secret",
                    "key"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-key",
                "value": "STIxbmlBMnJjV05YQkg2TjVyblFFZU1KZDlsS2d3RGEz",
                "tags": [],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/auth-nordstrom-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "auth-nordstrom-key",
                "value": "czVpVjVEaWE1YWtFc0lHZ1RPdDJIRHlBS3VGMDdUQkR2MA==",
                "tags": [
                    "auth",
                    "key",
                    "secret"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/core-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-blue-key",
                "value": "sFLJ6SK3sOarQM4pKVzpQro75WRQ7/zlguzr6GNa53GlCrweSADCCg==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/core-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "core-green-key",
                "value": "SGzxJ/OKgGjqg/gn/3f3GL50d74oudJsF127NeKGWLBcKbhDIDhjcw==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/custom-exporter-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "custom-exporter-key",
                "value": "5fu4dTFcjO275o8Lcz464W1EVRMF8zQvuaHWGMxzXOLzy3jw3TJiaw==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/eus2-lnx01func01-dev02-linux-fa-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "eus2-lnx01func01-dev02-linux-fa-blue-key",
                "value": "BI05LLnTM1KGuBDol8DDcVYixhXD7j5dhmhlQM6yha7aQug90UrAMQ==",
                "tags": [
                    "key",
                    "function",
                    "auto"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/eus2-lnx01func01-dev02-linux-fa-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "eus2-lnx01func01-dev02-linux-fa-green-key",
                "value": "RbyCOsU4k8so47HyVtftCRz0g5kR/Y8WE2VV5AVD6EFV/z0H9fyUQw==",
                "tags": [
                    "key",
                    "function",
                    "auto"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/event-processing-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "event-processing-key",
                "value": "c/KDLvHEUemnoRYbzQOHS2n2bpGF3VycOKAKQGemw8iCgq7VKibicg==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/frontdoor-id')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "frontdoor-id",
                "value": "3614069d-bff5-425c-916d-a33c357d0a95",
                "tags": [
                    "frontdoor",
                    "policy",
                    "apim"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/frontdoor-id-prem')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "frontdoor-id-prem",
                "value": "3614069d-bff5-425c-916d-a33c357d0a95",
                "tags": [
                    "frontdoor",
                    "policy",
                    "apim"
                ],
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/gql-gate-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-blue-key",
                "value": "5XWbPwrjxzCc6kCHn9a4BGsmO76bRJdKbhpLNeqpchwz/mREsLuaNQ==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/gql-gate-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-green-key",
                "value": "umf9wX12EGpXjrF/PmAPQSbriUWITv8PcmaW1OBRFb6utobJdYftyQ==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/gql-gate-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "gql-gate-key",
                "value": "nsaainoeVgErpQJhu2PhQHPZIArDjckVfNKe2ZoW1C1HeBF0vVBOEg==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/notifications-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-blue-key",
                "value": "VnuuZq/Fuxel33NBrRwMg2gdstUa9ZHk4ga1j5mhdb4cP4hDx2eYnA==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/notifications-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-green-key",
                "value": "INJZ6Sp5lZCcrF87pbZpT4EVaF7NzmcfeTgDi70ea0g/4FY0iVx7sA==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/notifications-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "notifications-key",
                "value": "iSDrJOkxBa0aKVAYHHAExnMmyaXCSuhlcEi4XrTMmBSz2zEaKbmU7A==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/sensor-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "sensor-key",
                "value": "q9FfvYrPxvtThShGCiq3HCkiaWtI6NAj70Ctz8qwDlmsqAASXGx0Dw==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/user-management-blue-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-blue-key",
                "value": "KpDL8HVGPuloVPYYJa0mqdNi8Cy28Lhm0pnyxB2SZjzAXJlrWY1KTA==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/user-management-green-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-green-key",
                "value": "ySJFmLfhbFyQUxOJwiEvIoBCRnN9DJPA1BrhxtjzhlgdBW5IndxWQw==",
                "secret": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/properties",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apimname'), '/user-management-key')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "displayName": "user-management-key",
                "value": "y4PpBySizM0z2lQmXw/SBZ/KXJUKyKeoFYpNB32HML6y11NzZBCpzQ==",
                "secret": true
            }
        },*/ /*
        {
            "type": "Microsoft.ApiManagement/service/subscriptions",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/master')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "scope": "[concat(resourceId('Microsoft.ApiManagement/service', variables('apimname')), '/')]",
                "displayName": "Built-in all-access subscription",
                "state": "active",
                "allowTracing": true
            }
        },*//*
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/AccountClosedDeveloper')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Thank you for using the $OrganizationName API!",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          On behalf of $OrganizationName and our customers we thank you for giving us a try. Your $OrganizationName API account is now closed.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Your $OrganizationName Team</p>\r\n    <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n    <p />\r\n  </body>\r\n</html>",
                "title": "Developer farewell letter",
                "description": "Developers receive this farewell email after they close their account.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/ApplicationApprovedNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your application $AppName is published in the application gallery",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We are happy to let you know that your request to publish the $AppName application in the application gallery has been approved. Your application has been published and can be viewed <a href=\"http://$DevPortalUrl/Applications/Details/$AppId\">here</a>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>",
                "title": "Application gallery submission approved",
                "description": "Developers who submitted their application for publication in the application gallery on the developer portal receive this email after their submission is approved.",
                "parameters": [
                    {
                        "name": "AppId",
                        "title": "Application id"
                    },
                    {
                        "name": "AppName",
                        "title": "Application name"
                    },
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/ConfirmSignUpIdentityDefault')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Please confirm your new $OrganizationName API account",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Letter</title>\r\n  </head>\r\n  <body>\r\n    <table width=\"100%\">\r\n      <tr>\r\n        <td>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\"></p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you for joining the $OrganizationName API program! We host a growing number of cool APIs and strive to provide an awesome experience for API developers.</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">First order of business is to activate your account and get you going. To that end, please click on the following link:</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a id=\"confirmUrl\" href=\"$ConfirmUrl\" style=\"text-decoration:none\">\r\n              <strong>$ConfirmUrl</strong>\r\n            </a>\r\n          </p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">If clicking the link does not work, please copy-and-paste or re-type it into your browser's address bar and hit \"Enter\".</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">$OrganizationName API Team</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </body>\r\n</html>",
                "title": "New developer account confirmation",
                "description": "Developers receive this email to confirm their e-mail address after they sign up for a new account.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    },
                    {
                        "name": "ConfirmUrl",
                        "title": "Developer activation URL"
                    },
                    {
                        "name": "DevPortalHost",
                        "title": "Developer portal hostname"
                    },
                    {
                        "name": "ConfirmQuery",
                        "title": "Query string part of the activation URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/EmailChangeIdentityDefault')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Please confirm the new email associated with your $OrganizationName API account",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Letter</title>\r\n  </head>\r\n  <body>\r\n    <table width=\"100%\">\r\n      <tr>\r\n        <td>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\"></p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">You are receiving this email because you made a change to the email address on your $OrganizationName API account.</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Please click on the following link to confirm the change:</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a id=\"confirmUrl\" href=\"$ConfirmUrl\" style=\"text-decoration:none\">\r\n              <strong>$ConfirmUrl</strong>\r\n            </a>\r\n          </p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">If clicking the link does not work, please copy-and-paste or re-type it into your browser's address bar and hit \"Enter\".</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">$OrganizationName API Team</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </body>\r\n</html>",
                "title": "Email change confirmation",
                "description": "Developers receive this email to confirm a new e-mail address after they change their existing one associated with their account.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    },
                    {
                        "name": "ConfirmUrl",
                        "title": "Developer confirmation URL"
                    },
                    {
                        "name": "DevPortalHost",
                        "title": "Developer portal hostname"
                    },
                    {
                        "name": "ConfirmQuery",
                        "title": "Query string part of the confirmation URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/InviteUserNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "You are invited to join the $OrganizationName developer network",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Your account has been created. Please follow the link below to visit the $OrganizationName developer portal and claim it:\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <a href=\"$ConfirmUrl\">$ConfirmUrl</a>\r\n    </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>",
                "title": "Invite user",
                "description": "An e-mail invitation to create an account, sent on request by API publishers.",
                "parameters": [
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "ConfirmUrl",
                        "title": "Confirmation link"
                    },
                    {
                        "name": "DevPortalHost",
                        "title": "Developer portal hostname"
                    },
                    {
                        "name": "ConfirmQuery",
                        "title": "Query string part of the confirmation link"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/NewCommentNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "$IssueName issue has a new comment",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">This is a brief note to let you know that $CommenterFirstName $CommenterLastName made the following comment on the issue $IssueName you created:</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">$CommentText</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          To view the issue on the developer portal click <a href=\"http://$DevPortalUrl/issues/$IssueId\">here</a>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>",
                "title": "New comment added to an issue",
                "description": "Developers receive this email when someone comments on the issue they created on the Issues page of the developer portal.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "CommenterFirstName",
                        "title": "Commenter first name"
                    },
                    {
                        "name": "CommenterLastName",
                        "title": "Commenter last name"
                    },
                    {
                        "name": "IssueId",
                        "title": "Issue id"
                    },
                    {
                        "name": "IssueName",
                        "title": "Issue name"
                    },
                    {
                        "name": "CommentText",
                        "title": "Comment text"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/NewDeveloperNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Welcome to the $OrganizationName API!",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Letter</title>\r\n  </head>\r\n  <body>\r\n    <h1 style=\"color:#000505;font-size:18pt;font-family:'Segoe UI'\">\r\n          Welcome to <span style=\"color:#003363\">$OrganizationName API!</span></h1>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Your $OrganizationName API program registration is completed and we are thrilled to have you as a customer. Here are a few important bits of information for your reference:</p>\r\n    <table width=\"100%\" style=\"margin:20px 0\">\r\n      <tr>\r\n            #if ($IdentityProvider == \"Basic\")\r\n            <td width=\"50%\" style=\"height:40px;vertical-align:top;font-family:'Segoe UI';font-size:12pt\">\r\n              Please use the following <strong>username</strong> when signing into any of the ${OrganizationName}-hosted developer portals:\r\n            </td><td style=\"vertical-align:top;font-family:'Segoe UI';font-size:12pt\"><strong>$DevUsername</strong></td>\r\n            #else\r\n            <td width=\"50%\" style=\"height:40px;vertical-align:top;font-family:'Segoe UI';font-size:12pt\">\r\n              Please use the following <strong>$IdentityProvider account</strong> when signing into any of the ${OrganizationName}-hosted developer portals:\r\n            </td><td style=\"vertical-align:top;font-family:'Segoe UI';font-size:12pt\"><strong>$DevUsername</strong></td>            \r\n            #end\r\n          </tr>\r\n      <tr>\r\n        <td style=\"height:40px;vertical-align:top;font-family:'Segoe UI';font-size:12pt\">\r\n              We will direct all communications to the following <strong>email address</strong>:\r\n            </td>\r\n        <td style=\"vertical-align:top;font-family:'Segoe UI';font-size:12pt\">\r\n          <a href=\"mailto:$DevEmail\" style=\"text-decoration:none\">\r\n            <strong>$DevEmail</strong>\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best of luck in your API pursuits!</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">$OrganizationName API Team</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <a href=\"http://$DevPortalUrl\">$DevPortalUrl</a>\r\n    </p>\r\n  </body>\r\n</html>",
                "title": "Developer welcome letter",
                "description": "Developers receive this “welcome” email after they confirm their new account.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "DevUsername",
                        "title": "Developer user name"
                    },
                    {
                        "name": "DevEmail",
                        "title": "Developer email"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    },
                    {
                        "name": "IdentityProvider",
                        "title": "Identity Provider selected by Organization"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/NewIssueNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your request $IssueName was received",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you for contacting us. Our API team will review your issue and get back to you soon.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Click this <a href=\"http://$DevPortalUrl/issues/$IssueId\">link</a> to view or edit your request.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Best,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n  </body>\r\n</html>",
                "title": "New issue received",
                "description": "This email is sent to developers after they create a new topic on the Issues page of the developer portal.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "IssueId",
                        "title": "Issue id"
                    },
                    {
                        "name": "IssueName",
                        "title": "Issue name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/PasswordResetByAdminNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your password was reset",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <table width=\"100%\">\r\n      <tr>\r\n        <td>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\"></p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">The password of your $OrganizationName API account has been reset, per your request.</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n                Your new password is: <strong>$DevPassword</strong></p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Please make sure to change it next time you sign in.</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">$OrganizationName API Team</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </body>\r\n</html>",
                "title": "Password reset by publisher notification (Password reset by admin)",
                "description": "Developers receive this email when the publisher resets their password.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "DevPassword",
                        "title": "New Developer password"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/PasswordResetIdentityDefault')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your password change request",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Letter</title>\r\n  </head>\r\n  <body>\r\n    <table width=\"100%\">\r\n      <tr>\r\n        <td>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\"></p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">You are receiving this email because you requested to change the password on your $OrganizationName API account.</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Please click on the link below and follow instructions to create your new password:</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a id=\"resetUrl\" href=\"$ConfirmUrl\" style=\"text-decoration:none\">\r\n              <strong>$ConfirmUrl</strong>\r\n            </a>\r\n          </p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">If clicking the link does not work, please copy-and-paste or re-type it into your browser's address bar and hit \"Enter\".</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">$OrganizationName API Team</p>\r\n          <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n          </p>\r\n        </td>\r\n      </tr>\r\n    </table>\r\n  </body>\r\n</html>",
                "title": "Password change confirmation",
                "description": "Developers receive this email when they request a password change of their account. The purpose of the email is to verify that the account owner made the request and to provide a one-time perishable URL for changing the password.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    },
                    {
                        "name": "ConfirmUrl",
                        "title": "Developer new password instruction URL"
                    },
                    {
                        "name": "DevPortalHost",
                        "title": "Developer portal hostname"
                    },
                    {
                        "name": "ConfirmQuery",
                        "title": "Query string part of the instruction URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/PurchaseDeveloperNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your subscription to the $ProdName",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Greetings $DevFirstName $DevLastName!</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Thank you for subscribing to the <a href=\"http://$DevPortalUrl/products/$ProdId\"><strong>$ProdName</strong></a> and welcome to the $OrganizationName developer community. We are delighted to have you as part of the team and are looking forward to the amazing applications you will build using our API!\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Below are a few subscription details for your reference:</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <ul>\r\n            #if ($SubStartDate != \"\")\r\n            <li style=\"font-size:12pt;font-family:'Segoe UI'\">Start date: $SubStartDate</li>\r\n            #end\r\n            \r\n            #if ($SubTerm != \"\")\r\n            <li style=\"font-size:12pt;font-family:'Segoe UI'\">Subscription term: $SubTerm</li>\r\n            #end\r\n          </ul>\r\n    </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n            Visit the developer <a href=\"http://$DevPortalUrl/developer\">profile area</a> to manage your subscription and subscription keys\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">A couple of pointers to help get you started:</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <strong>\r\n        <a href=\"http://$DevPortalUrl/docs/services?product=$ProdId\">Learn about the API</a>\r\n      </strong>\r\n    </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The API documentation provides all information necessary to make a request and to process a response. Code samples are provided per API operation in a variety of languages. Moreover, an interactive console allows making API calls directly from the developer portal without writing any code.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <strong>\r\n        <a href=\"http://$DevPortalUrl/applications\">Feature your app in the app gallery</a>\r\n      </strong>\r\n    </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">You can publish your application on our gallery for increased visibility to potential new users.</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n      <strong>\r\n        <a href=\"http://$DevPortalUrl/issues\">Stay in touch</a>\r\n      </strong>\r\n    </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          If you have an issue, a question, a suggestion, a request, or if you just want to tell us something, go to the <a href=\"http://$DevPortalUrl/issues\">Issues</a> page on the developer portal and create a new topic.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Happy hacking,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n    <a style=\"font-size:12pt;font-family:'Segoe UI'\" href=\"http://$DevPortalUrl\">$DevPortalUrl</a>\r\n  </body>\r\n</html>",
                "title": "New subscription activated",
                "description": "Developers receive this acknowledgement email after subscribing to a product.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "ProdId",
                        "title": "Product ID"
                    },
                    {
                        "name": "ProdName",
                        "title": "Product name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "SubStartDate",
                        "title": "Subscription start date"
                    },
                    {
                        "name": "SubTerm",
                        "title": "Subscription term"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/QuotaLimitApproachingDeveloperNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "You are approaching an API quota limit",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head>\r\n    <style>\r\n          body {font-size:12pt; font-family:\"Segoe UI\",\"Segoe WP\",\"Tahoma\",\"Arial\",\"sans-serif\";}\r\n          .alert { color: red; }\r\n          .child1 { padding-left: 20px; }\r\n          .child2 { padding-left: 40px; }\r\n          .number { text-align: right; }\r\n          .text { text-align: left; }\r\n          th, td { padding: 4px 10px; min-width: 100px; }\r\n          th { background-color: #DDDDDD;}\r\n        </style>\r\n  </head>\r\n  <body>\r\n    <p>Greetings $DevFirstName $DevLastName!</p>\r\n    <p>\r\n          You are approaching the quota limit on you subscription to the <strong>$ProdName</strong> product (primary key $SubPrimaryKey).\r\n          #if ($QuotaResetDate != \"\")\r\n          This quota will be renewed on $QuotaResetDate.\r\n          #else\r\n          This quota will not be renewed.\r\n          #end\r\n        </p>\r\n    <p>Below are details on quota usage for the subscription:</p>\r\n    <p>\r\n      <table>\r\n        <thead>\r\n          <th class=\"text\">Quota Scope</th>\r\n          <th class=\"number\">Calls</th>\r\n          <th class=\"number\">Call Quota</th>\r\n          <th class=\"number\">Bandwidth</th>\r\n          <th class=\"number\">Bandwidth Quota</th>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td class=\"text\">Subscription</td>\r\n            <td class=\"number\">\r\n                  #if ($CallsAlert == true)\r\n                  <span class=\"alert\">$Calls</span>\r\n                  #else\r\n                  $Calls\r\n                  #end\r\n                </td>\r\n            <td class=\"number\">$CallQuota</td>\r\n            <td class=\"number\">\r\n                  #if ($BandwidthAlert == true)\r\n                  <span class=\"alert\">$Bandwidth</span>\r\n                  #else\r\n                  $Bandwidth\r\n                  #end\r\n                </td>\r\n            <td class=\"number\">$BandwidthQuota</td>\r\n          </tr>\r\n              #foreach ($api in $Apis)\r\n              <tr><td class=\"child1 text\">API: $api.Name</td><td class=\"number\">\r\n                  #if ($api.CallsAlert == true)\r\n                  <span class=\"alert\">$api.Calls</span>\r\n                  #else\r\n                  $api.Calls\r\n                  #end\r\n                </td><td class=\"number\">$api.CallQuota</td><td class=\"number\">\r\n                  #if ($api.BandwidthAlert == true)\r\n                  <span class=\"alert\">$api.Bandwidth</span>\r\n                  #else\r\n                  $api.Bandwidth\r\n                  #end\r\n                </td><td class=\"number\">$api.BandwidthQuota</td></tr>\r\n              #foreach ($operation in $api.Operations)\r\n              <tr><td class=\"child2 text\">Operation: $operation.Name</td><td class=\"number\">\r\n                  #if ($operation.CallsAlert == true)\r\n                  <span class=\"alert\">$operation.Calls</span>\r\n                  #else\r\n                  $operation.Calls\r\n                  #end\r\n                </td><td class=\"number\">$operation.CallQuota</td><td class=\"number\">\r\n                  #if ($operation.BandwidthAlert == true)\r\n                  <span class=\"alert\">$operation.Bandwidth</span>\r\n                  #else\r\n                  $operation.Bandwidth\r\n                  #end\r\n                </td><td class=\"number\">$operation.BandwidthQuota</td></tr>\r\n              #end\r\n              #end\r\n            </tbody>\r\n      </table>\r\n    </p>\r\n    <p>Thank you,</p>\r\n    <p>$OrganizationName API Team</p>\r\n    <a href=\"$DevPortalUrl\">$DevPortalUrl</a>\r\n    <p />\r\n  </body>\r\n</html>",
                "title": "Developer quota limit approaching notification",
                "description": "Developers receive this email to alert them when they are approaching a quota limit.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "ProdName",
                        "title": "Product name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "SubPrimaryKey",
                        "title": "Primary Subscription key"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    },
                    {
                        "name": "QuotaResetDate",
                        "title": "Quota reset date"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/RejectDeveloperNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your subscription request for the $ProdName",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We would like to inform you that we reviewed your subscription request for the <strong>$ProdName</strong>.\r\n        </p>\r\n        #if ($SubDeclineReason == \"\")\r\n        <p style=\"font-size:12pt;font-family:'Segoe UI'\">Regretfully, we were unable to approve it, as subscriptions are temporarily suspended at this time.</p>\r\n        #else\r\n        <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Regretfully, we were unable to approve it at this time for the following reason:\r\n          <div style=\"margin-left: 1.5em;\"> $SubDeclineReason </div></p>\r\n        #end\r\n        <p style=\"font-size:12pt;font-family:'Segoe UI'\"> We truly appreciate your interest. </p><p style=\"font-size:12pt;font-family:'Segoe UI'\">All the best,</p><p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p><a style=\"font-size:12pt;font-family:'Segoe UI'\" href=\"http://$DevPortalUrl\">$DevPortalUrl</a></body>\r\n</html>",
                "title": "Subscription request declined",
                "description": "This email is sent to developers when their subscription requests for products requiring publisher approval is declined.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "SubDeclineReason",
                        "title": "Reason for declining subscription"
                    },
                    {
                        "name": "ProdName",
                        "title": "Product name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/templates",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/RequestDeveloperNotificationMessage')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "subject": "Your subscription request for the $ProdName",
                "body": "<!DOCTYPE html >\r\n<html>\r\n  <head />\r\n  <body>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Dear $DevFirstName $DevLastName,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          Thank you for your interest in our <strong>$ProdName</strong> API product!\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">\r\n          We were delighted to receive your subscription request. We will promptly review it and get back to you at <strong>$DevEmail</strong>.\r\n        </p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">Thank you,</p>\r\n    <p style=\"font-size:12pt;font-family:'Segoe UI'\">The $OrganizationName API Team</p>\r\n    <a style=\"font-size:12pt;font-family:'Segoe UI'\" href=\"http://$DevPortalUrl\">$DevPortalUrl</a>\r\n  </body>\r\n</html>",
                "title": "Subscription request received",
                "description": "This email is sent to developers to acknowledge receipt of their subscription requests for products requiring publisher approval.",
                "parameters": [
                    {
                        "name": "DevFirstName",
                        "title": "Developer first name"
                    },
                    {
                        "name": "DevLastName",
                        "title": "Developer last name"
                    },
                    {
                        "name": "DevEmail",
                        "title": "Developer email"
                    },
                    {
                        "name": "ProdName",
                        "title": "Product name"
                    },
                    {
                        "name": "OrganizationName",
                        "title": "Organization name"
                    },
                    {
                        "name": "DevPortalUrl",
                        "title": "Developer portal URL"
                    }
                ]
            }
        },*/
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/audit-logs-api/auditLogs')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'audit-logs-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAuditLogs",
                "method": "GET",
                "urlTemplate": "/{entity_name}/{entity_id}",
                "templateParameters": [
                    {
                        "name": "entity_name",
                        "type": "string",
                        "required": true,
                        "values": []
                    },
                    {
                        "name": "entity_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/authenticate')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "Authenticate",
                "method": "POST",
                "urlTemplate": "/oauth/token",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/authorizer')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "Authenticate",
                "method": "GET",
                "urlTemplate": "/authorize",
                "templateParameters": [],
                "responses": []
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/bulkUpdateGroupMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "BulkUpdateGroupMembers",
                "method": "PUT",
                "urlTemplate": "/group/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),  '/auth-api/checkToken')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CheckToken",
                "method": "POST",
                "urlTemplate": "/oauth/check_token",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/configuration')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "configuration",
                "method": "GET",
                "urlTemplate": "/oauth/configuration",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),  '/auth-api/createApplication')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CreateApplication",
                "method": "POST",
                "urlTemplate": "/application",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),  '/auth-api/createGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CreateGroup",
                "method": "POST",
                "urlTemplate": "/group",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'),  '/auth-api/createPermission')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CreatePermission",
                "method": "POST",
                "urlTemplate": "/permission",
                "templateParameters": [],
                "responses": []
            }
        },


        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createRole')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CreateRole",
                "method": "POST",
                "urlTemplate": "/role",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "CreateUser",
                "method": "POST",
                "urlTemplate": "/user",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteApplication')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeleteApplication",
                "method": "DELETE",
                "urlTemplate": "/application/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteApplicationMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeleteApplicationMembers",
                "method": "DELETE",
                "urlTemplate": "/application/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeleteGroup",
                "method": "DELETE",
                "urlTemplate": "/group/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deletePermission')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeletePermission",
                "method": "DELETE",
                "urlTemplate": "/permission/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteRole')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeleteRole",
                "method": "DELETE",
                "urlTemplate": "/role/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "DeleteUser",
                "method": "DELETE",
                "urlTemplate": "/user/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/docs')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "docs",
                "method": "GET",
                "urlTemplate": "/docs",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/expirePassword')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "ExpirePassword",
                "method": "POST",
                "urlTemplate": "/password/expire",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/findUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
            ],
            "properties": {
                "displayName": "FindUser",
                "method": "GET",
                "urlTemplate": "/user",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplication')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetApplication",
                "method": "GET",
                "urlTemplate": "/application/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplicationMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetApplicationMembers",
                "method": "GET",
                "urlTemplate": "/application/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplications')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetApplications",
                "method": "GET",
                "urlTemplate": "/application",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetGroup",
                "method": "GET",
                "urlTemplate": "/group/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroupMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetGroupMembers",
                "method": "GET",
                "urlTemplate": "/group/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroups')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetGroups",
                "method": "GET",
                "urlTemplate": "/group",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermission')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetPermission",
                "method": "GET",
                "urlTemplate": "/permission/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermissionMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetPermissionMembers",
                "method": "GET",
                "urlTemplate": "/permission/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermissions')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetPermissions",
                "method": "GET",
                "urlTemplate": "/permission",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRole')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetRole",
                "method": "GET",
                "urlTemplate": "/role/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRoleMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetRoleMembers",
                "method": "GET",
                "urlTemplate": "/role/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRoles')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetRoles",
                "method": "GET",
                "urlTemplate": "/role",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetUser",
                "method": "GET",
                "urlTemplate": "/user/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUserInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetUserInfo",
                "method": "GET",
                "urlTemplate": "/userinfo",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUsers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "GetUsers",
                "method": "GET",
                "urlTemplate": "/users",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/modify-resource')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Modify Resource",
                "method": "PUT",
                "urlTemplate": "/resource",
                "templateParameters": [],
                "description": "A demonstration of a PUT call handled by the same \"echo\" backend as above. You can now specify a request body in addition to headers and it will be returned as well.",
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/ping')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "ping",
                "method": "GET",
                "urlTemplate": "/health",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/remove-resource')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Remove resource",
                "method": "DELETE",
                "urlTemplate": "/resource",
                "templateParameters": [],
                "description": "A demonstration of a DELETE call which traditionally deletes the resource. It is based on the same \"echo\" backend as in all other operations so nothing is actually deleted.",
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/resendVerifyUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "ResendVerifyUser",
                "method": "PATCH",
                "urlTemplate": "/user/verify",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/resetPassword')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "ResetPassword",
                "method": "POST",
                "urlTemplate": "/reset",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/retrieve-header-only')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Retrieve header only",
                "method": "HEAD",
                "urlTemplate": "/resource",
                "templateParameters": [],
                "description": "The HEAD operation returns only headers. In this demonstration a policy is used to set additional headers when the response is returned and to enable JSONP.",
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/retrieve-resource')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Retrieve resource",
                "method": "GET",
                "urlTemplate": "/resource",
                "templateParameters": [],
                "description": "A demonstration of a GET call on a sample resource. It is handled by an \"echo\" backend which returns a response equal to the request (the supplied headers and body are being returned as received).",
                "request": {
                    "queryParameters": [
                        {
                            "name": "param1",
                            "description": "A sample parameter that is required and has a default value of \"sample\".",
                            "type": "string",
                            "defaultValue": "sample",
                            "required": true,
                            "values": [
                                "sample"
                            ]
                        },
                        {
                            "name": "param2",
                            "description": "Another sample parameter, set to not required.",
                            "type": "number",
                            "values": []
                        }
                    ],
                    "headers": [],
                    "representations": []
                },
                "responses": [
                    {
                        "statusCode": 200,
                        "description": "Returned in all cases.",
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/retrieve-resource-cached')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Retrieve resource (cached)",
                "method": "GET",
                "urlTemplate": "/resource-cached",
                "templateParameters": [],
                "description": "A demonstration of a GET call with caching enabled on the same \"echo\" backend as above. Cache TTL is set to 1 hour. When you make the first request the headers you supplied will be cached. Subsequent calls will return the same headers as the first time even if you change them in your request.",
                "request": {
                    "queryParameters": [
                        {
                            "name": "param1",
                            "description": "A sample parameter that is required and has a default value of \"sample\".",
                            "type": "string",
                            "defaultValue": "sample",
                            "required": true,
                            "values": [
                                "sample"
                            ]
                        },
                        {
                            "name": "param2",
                            "description": "Another sample parameter, set to not required.",
                            "type": "string",
                            "values": []
                        }
                    ],
                    "headers": [],
                    "representations": []
                },
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/revokeToken')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "RevokeToken",
                "method": "POST",
                "urlTemplate": "/oauth/revoke",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/ssoAuthorize')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "SsoAuthorize",
                "method": "POST",
                "urlTemplate": "/sso/authorize",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/supportSsoAuthorize')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "SupportSsoAuthorize",
                "method": "POST",
                "urlTemplate": "/sso/support/authorize",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateApplication')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateApplication",
                "method": "PUT",
                "urlTemplate": "/application/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateApplicationMembers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateApplicationMembers",
                "method": "PATCH",
                "urlTemplate": "/application/{id}/members",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateGroup",
                "method": "PUT",
                "urlTemplate": "/group/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updatePassword')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdatePassword",
                "method": "PUT",
                "urlTemplate": "/password",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updatePermission')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdatePermission",
                "method": "PUT",
                "urlTemplate": "/permission/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateRole')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateRole",
                "method": "PUT",
                "urlTemplate": "/role/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateUser",
                "method": "PUT",
                "urlTemplate": "/user/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/validateReset')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "VerifyUser",
                "method": "POST",
                "urlTemplate": "/reset/verify",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/verifyUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'auth-api')]"
                 
            ],
            "properties": {
                "displayName": "VerifyUser",
                "method": "POST",
                "urlTemplate": "/user/verify",
                "templateParameters": [],
                "responses": []
            }
        },

        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/createAlert')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "CreateAlert",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/createDataView')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "CreateDataView",
                "method": "POST",
                "urlTemplate": "/dataviews",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/createDataViewGroups')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "CreateDataViewGroup",
                "method": "POST",
                "urlTemplate": "/dataviewgroups",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/createEquipmentRule')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "displayName": "PostEquipmentRule",
                "method": "POST",
                "urlTemplate": "/equipmentRules",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/createMetricEvent')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "displayName": "PostMetricEevents",
                "method": "POST",
                "urlTemplate": "/metricEvents",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/createRule')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "displayName": "CreateRule",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/createTeam')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "displayName": "CreateTeam",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/deleteAlert')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "DeleteAlert",
                "method": "DELETE",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/deleteDataView')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateDataView",
                "method": "DELETE",
                "urlTemplate": "/dataviews/{data_view_id}",
                "templateParameters": [
                    {
                        "name": "data_view_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/deleteDataViewGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "DeleteDataViewGroups",
                "method": "DELETE",
                "urlTemplate": "/dataviewgroups/{data_view_group_id}",
                "templateParameters": [
                    {
                        "name": "data_view_group_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/deleteRule')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "displayName": "DeleteRule",
                "method": "DELETE",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/deleteTeam')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "displayName": "DeleteTeam",
                "method": "DELETE",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/getAlert')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAlert",
                "method": "GET",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/GET-AlertGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                
            ],
            "properties": {
                "displayName": "AlertGraph (GET)",
                "method": "GET",
                "urlTemplate": "/alert/graphql",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/getAlerts')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAlerts",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/getAnalyticsData')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAnalyticsData",
                "method": "POST",
                "urlTemplate": "/{system_id}/{category_id}/{analytic_id}",
                "templateParameters": [
                    {
                        "name": "system_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "category_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "analytic_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api/getAnalyticsData')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAnalyticsData",
                "method": "POST",
                "urlTemplate": "/{system_id}/{category_id}/{analytic_id}",
                "templateParameters": [
                    {
                        "name": "system_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "category_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "analytic_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/getAnalyticsDataLegacy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAnalyticsData",
                "method": "GET",
                "urlTemplate": "/{system_id}",
                "templateParameters": [
                    {
                        "name": "system_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api/getAnalyticsDataLegacy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAnalyticsData",
                "method": "POST",
                "urlTemplate": "/{system_id}",
                "templateParameters": [
                    {
                        "name": "system_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api/getConfig')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'config-api')]"
                 
            ],
            "properties": {
                "displayName": "GetConfig",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/GET-CoreGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "CoreGraph (GET)",
                "method": "GET",
                "urlTemplate": "/core",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/GET-CoreGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "displayName": "CoreGraph (GET)",
                "method": "GET",
                "urlTemplate": "/core",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataView')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "GetDataView",
                "method": "GET",
                "urlTemplate": "/dataviews/{data_view_id}",
                "templateParameters": [
                    {
                        "name": "data_view_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViewGroups')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "GetDataViewGroups",
                "method": "GET",
                "urlTemplate": "/dataviewgroups",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViewRequets')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "PostDataViewRequests",
                "method": "POST",
                "urlTemplate": "/dataviews/{data_view_id}/requests",
                "templateParameters": [
                    {
                        "name": "data_view_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViews')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                
            ],
            "properties": {
                "displayName": "GetDataViews",
                "method": "GET",
                "urlTemplate": "/dataviews",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/getDocs')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "getDocs",
                "method": "GET",
                "urlTemplate": "/docs",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/getDocs')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "displayName": "getDocs",
                "method": "GET",
                "urlTemplate": "/docs",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/getEquipmentAnomalies')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetEquipmentAnomalies",
                "method": "GET",
                "urlTemplate": "/{equipment_id}/anomalies",
                "templateParameters": [
                    {
                        "name": "equipment_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/getEquipmentAnomalies')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetEquipmentAnomalies",
                "method": "GET",
                "urlTemplate": "/{equipment_id}/anomalies",
                "templateParameters": [
                    {
                        "name": "equipment_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/getEquipmentRules')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "displayName": "GetEquipmentRules",
                "method": "GET",
                "urlTemplate": "/equipmentRules",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/getgraphql')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                
            ],
            "properties": {
                "displayName": "GETGraphQL",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/getgraphql')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GETGraphQL",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/getMetricData')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetMetricData",
                "method": "GET",
                "urlTemplate": "/{equipment_id}/components/{component_id}/metrics/{metric_id}",
                "templateParameters": [
                    {
                        "name": "equipment_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "component_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "metric_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/getMetricData')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetMetricData",
                "method": "GET",
                "urlTemplate": "/{equipment_id}/components/{component_id}/metrics/{metric_id}",
                "templateParameters": [
                    {
                        "name": "equipment_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "component_id",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "metric_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/getMetricEvents')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "displayName": "GetMetricEvents",
                "method": "GET",
                "urlTemplate": "/metricEvents",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-blue-api/getNavigation')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-blue-api')]"
                
            ],
            "properties": {
                "displayName": "GetNavigation",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-green-api/getNavigation')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetNavigation",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/getRule')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAlert",
                "method": "GET",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/getRules')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "displayName": "GetRules",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-blue-api')]"
                
            ],
            "properties": {
                "displayName": "GetCoreStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetCoreStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/getStatusInfo')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "displayName": "GetStatusInfo",
                "method": "GET",
                "urlTemplate": "/status/info",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/getTeam')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "displayName": "GetTeam",
                "method": "GET",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/GET-TeamGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "TeamGraph (GET)",
                "method": "GET",
                "urlTemplate": "/team/graphql",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/getTeams')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "displayName": "GetTeams",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/getUserConfig')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "getUserConfig",
                "method": "GET",
                "urlTemplate": "/{user_id}/config",
                "templateParameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/getUserConfig')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "displayName": "getUserConfig",
                "method": "GET",
                "urlTemplate": "/{user_id}/config",
                "templateParameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-api/healthcheck')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'event-api')]"
                 
            ],
            "properties": {
                "displayName": "ping",
                "method": "GET",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/POST-AlertGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "AlertGraph (POST)",
                "method": "POST",
                "urlTemplate": "/alert/graphql",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/postAnalyticsDataLegacy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "GetAnalyticsData",
                "method": "POST",
                "urlTemplate": "/{system_id}",
                "templateParameters": [
                    {
                        "name": "system_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/POST-CoreGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "CoreGraph (POST)",
                "method": "POST",
                "urlTemplate": "/core",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/POST-CoreGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "displayName": "CoreGraph (POST)",
                "method": "POST",
                "urlTemplate": "/core",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/postEquipmentGremlinQuery')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "PostEquipmentGremlinQuery",
                "method": "POST",
                "urlTemplate": "/gremlinQuery",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/postEquipmentGremlinQuery')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "displayName": "PostEquipmentGremlinQuery",
                "method": "POST",
                "urlTemplate": "/gremlinQuery",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/postgraphql')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "POSTGraphQL",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/postgraphql')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                
            ],
            "properties": {
                "displayName": "POSTGraphQL",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-blue/post-postedgedeviceprovisionlinux')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-blue')]"
                 
            ],
            "properties": {
                "displayName": "postEdgeDeviceProvisionLinux",
                "method": "POST",
                "urlTemplate": "/linux/edgeDevice/provision",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-green/post-postedgedeviceprovisionlinux')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-green')]"
                
            ],
            "properties": {
                "displayName": "postEdgeDeviceProvisionLinux",
                "method": "POST",
                "urlTemplate": "/linux/edgeDevice/provision",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/POST-TeamGraph')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "TeamGraph (POST)",
                "method": "POST",
                "urlTemplate": "/team/graphql",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api/putConfig')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'config-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateConfig",
                "method": "PUT",
                "urlTemplate": "/",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gateways-api/saveGatewayTelemetry')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'gateways-api')]"
                 
            ],
            "properties": {
                "displayName": "PostGatewayMessage",
                "method": "POST",
                "urlTemplate": "/message",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-blue-api/saveGatewayTelemetry')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "PostGatewayMessage",
                "method": "POST",
                "urlTemplate": "/message",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-green-api/saveGatewayTelemetry')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-green-api')]"
                 
            ],
            "properties": {
                "displayName": "PostGatewayMessage",
                "method": "POST",
                "urlTemplate": "/message",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/sendEmail')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "SendEmail",
                "method": "POST",
                "urlTemplate": "/email",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/sendEmail')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "displayName": "SendEmail",
                "method": "POST",
                "urlTemplate": "/email",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/sendText')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "SendText",
                "method": "POST",
                "urlTemplate": "/text",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/sendText')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "displayName": "SendText",
                "method": "POST",
                "urlTemplate": "/text",
                "templateParameters": [],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/updateAlertStatus')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateTeam",
                "method": "PUT",
                "urlTemplate": "/{id}/status",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/updateDataView')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateDataView",
                "method": "PATCH",
                "urlTemplate": "/dataviews/{data_view_id}",
                "templateParameters": [
                    {
                        "name": "data_view_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/updateDataViewGroup')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateDataViewGroup",
                "method": "PATCH",
                "urlTemplate": "/dataviewgroups/{data_view_group_id}",
                "templateParameters": [
                    {
                        "name": "data_view_group_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/updateMetricEventStatus')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateMetricEventStatus",
                "method": "POST",
                "urlTemplate": "/metricEvents/{metric_event_id}/status",
                "templateParameters": [
                    {
                        "name": "metric_event_id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/updateRule')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "displayName": "PatchRule",
                "method": "PATCH",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/updateTeam')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "displayName": "UpdateTeam",
                "method": "PUT",
                "urlTemplate": "/{id}",
                "templateParameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-blue-api/validate')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "PostValidate",
                "method": "POST",
                "urlTemplate": "/validate/{entity_name}/{validation_rule}",
                "templateParameters": [
                    {
                        "name": "entity_name",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "validation_rule",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-green-api/validate')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-green-api')]"
                 
            ],
            "properties": {
                "displayName": "PostValidate",
                "method": "POST",
                "urlTemplate": "/validate/{entity_name}/{validation_rule}",
                "templateParameters": [
                    {
                        "name": "entity_name",
                        "type": "string",
                        "values": []
                    },
                    {
                        "name": "validation_rule",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/verifyUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "displayName": "verifyUser",
                "method": "POST",
                "urlTemplate": "/verify/{user_id}",
                "templateParameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/verifyUser')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "displayName": "verifyUser",
                "method": "POST",
                "urlTemplate": "/verify/{user_id}",
                "templateParameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "values": []
                    }
                ],
                "responses": []
            }
        },
                
        
        
        
        
        
        
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/create-resource')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'echo-api')]"
                 
            ],
            "properties": {
                "displayName": "Create resource",
                "method": "POST",
                "urlTemplate": "/resource",
                "templateParameters": [],
                "description": "A demonstration of a POST call based on the echo backend above. The request body is expected to contain JSON-formatted data (see example below). A policy is used to automatically transform any request sent in JSON directly to XML. In a real-world scenario this could be used to enable modern clients to speak to a legacy backend.",
                "request": {
                    "queryParameters": [],
                    "headers": [],
                    "representations": [
                        {
                            "contentType": "application/json",
                            "examples": {
                                "default": {
                                    "value": "{\r\n\t\"vehicleType\": \"train\",\r\n\t\"maxSpeed\": 125,\r\n\t\"avgSpeed\": 90,\r\n\t\"speedUnit\": \"mph\"\r\n}"
                                }
                            }
                        }
                    ]
                },
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },


        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/audit-logs-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'audit-logs-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'config-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-blue/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-blue')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-green/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-green')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'event-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gateways-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'gateways-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-blue-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-green-api/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cors>\r\n      <allowed-origins>\r\n        <origin>*</origin>\r\n      </allowed-origins>\r\n      <allowed-methods preflight-result-max-age=\"3600\">\r\n        <method>GET</method>\r\n        <method>POST</method>\r\n        <method>PUT</method>\r\n        <method>DELETE</method>\r\n        <method>PATCH</method>\r\n        <method>OPTIONS</method>\r\n      </allowed-methods>\r\n      <allowed-headers>\r\n        <header>*</header>\r\n      </allowed-headers>\r\n      <expose-headers>\r\n        <header>*</header>\r\n      </expose-headers>\r\n    </cors>\r\n    <check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"401\" failed-check-error-message=\"Not authorized\" ignore-case=\"false\">\r\n      <value>{{frontdoor-id}}</value>\r\n    </check-header>\r\n    <!-- Ensure presence of Authorization header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;Authorization&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <!-- Ensure presence of x-segment header -->\r\n    <choose>\r\n      <when condition=\"@(!context.Request.Headers.ContainsKey(&quot;x-segment&quot;))\">\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </when>\r\n    </choose>\r\n    <choose>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;crocs&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-crocs-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;datarelay&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-datarelay-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-Demo-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;demo2&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-demo2-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <!-- Validate JWT token for Demo customer -->\r\n      <when condition=\"@(context.Request.Headers.ContainsKey(&quot;Authorization&quot;) &amp;&amp; context.Request.Headers.GetValueOrDefault(&quot;x-segment&quot;, &quot;&quot;) == &quot;nordstrom&quot;)\">\r\n        <validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing, expired or not valid.\" require-scheme=\"Bearer\" output-token-variable-name=\"jwt\">\r\n          <issuer-signing-keys>\r\n            <key>{{auth-nordstrom-key}}</key>\r\n          </issuer-signing-keys>\r\n          <issuers>\r\n            <issuer>dematic.com</issuer>\r\n          </issuers>\r\n        </validate-jwt>\r\n        <set-header name=\"x-user\" exists-action=\"override\">\r\n          <value>@{\r\n                Jwt jwt = (Jwt)context.Variables.GetValueOrDefault(\"jwt\");\r\n                string serialized = JsonConvert.SerializeObject(jwt.Claims);\r\n                return serialized;\r\n            }</value>\r\n        </set-header>\r\n      </when>\r\n      <otherwise>\r\n        <return-response>\r\n          <set-status code=\"401\" reason=\"Unauthorized\" />\r\n          <set-header name=\"WWW-Authenticate\" exists-action=\"append\">\r\n            <value>@(\"Bearer realm=\"+context.Request.OriginalUrl.Host)</value>\r\n          </set-header>\r\n        </return-response>\r\n      </otherwise>\r\n    </choose>\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },

        {
            "type": "Microsoft.ApiManagement/service/products/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/starter/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', variables('apimname'), 'starter')]"
                 
            ],
            "properties": {
                "value": "<!--\r\n            IMPORTANT:\r\n            - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n            - Only the <forward-request> policy element can appear within the <backend> section element.\r\n            - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n            - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n            - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n            - To remove a policy, delete the corresponding policy statement from the policy document.\r\n            - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n            - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n            - Policies are applied in the order of their appearance, from the top down.\r\n        -->\r\n<policies>\r\n  <inbound>\r\n    <rate-limit calls=\"5\" renewal-period=\"60\" />\r\n    <quota calls=\"100\" renewal-period=\"604800\" />\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/createAlert/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'createAlert')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/deleteAlert/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'deleteAlert')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/getAlert/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'getAlert')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/GET-AlertGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'GET-AlertGraph')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/getAlerts/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'getAlerts')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/GET-TeamGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'GET-TeamGraph')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/POST-AlertGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'POST-AlertGraph')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/POST-TeamGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'POST-TeamGraph')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/alert-api/updateAlertStatus/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'alert-api', 'updateAlertStatus')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'alert-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"alert-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/getAnalyticsData/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'analytics-blue-api', 'getAnalyticsData')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"analytics-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/getAnalyticsDataLegacy/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'analytics-blue-api', 'getAnalyticsDataLegacy')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"analytics-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-blue-api/postAnalyticsDataLegacy/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'analytics-blue-api', 'postAnalyticsDataLegacy')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"analytics-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api/getAnalyticsData/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'analytics-green-api', 'getAnalyticsData')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"analytics-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/analytics-green-api/getAnalyticsDataLegacy/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'analytics-green-api', 'getAnalyticsDataLegacy')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'analytics-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"analytics-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/audit-logs-api/auditLogs/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'audit-logs-api', 'auditLogs')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'audit-logs-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"audit-logs-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api/getConfig/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'config-api', 'getConfig')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'config-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"config-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/config-api/putConfig/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'config-api', 'putConfig')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'config-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"config-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-blue-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'core-blue-api', 'getStatusInfo')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"core-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/core-green-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'core-green-api', 'getStatusInfo')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'core-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"core-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/createDataView/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'dataviews-api', 'createDataView')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/createDataViewGroups/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'dataviews-api', 'createDataViewGroups')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/deleteDataView/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'dataviews-api', 'deleteDataView')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/deleteDataViewGroup/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimname'), 'dataviews-api', 'deleteDataViewGroup')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataView/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViewGroups/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViewRequets/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/getDataViews/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/updateDataView/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/dataviews-api/updateDataViewGroup/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'dataviews-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"dataview-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-blue/post-postedgedeviceprovisionlinux/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-blue')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"eus2-lnx01func01-dev02-linux-fa-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/device-provision-green/post-postedgedeviceprovisionlinux/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'device-provision-green')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"eus2-lnx01func01-dev02-linux-fa-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/createEquipmentRule/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipment-rules-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/createMetricEvent/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipment-rules-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/getEquipmentRules/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipment-rules-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/getMetricEvents/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipment-rules-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipment-rules-api/updateMetricEventStatus/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipment-rules-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipment-rules-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/getEquipmentAnomalies/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/getMetricData/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-blue-api/postEquipmentGremlinQuery/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/getEquipmentAnomalies/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/getMetricData/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/equipments-green-api/postEquipmentGremlinQuery/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'equipments-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"equipments-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/event-api/healthcheck/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'event-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"event-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/gateways-api/saveGatewayTelemetry/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'gateways-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"gateways-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/getgraphql/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-blue-api/postgraphql/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/getgraphql/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/graphql-green-api/postgraphql/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'graphql-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"graphql-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-blue-api/getNavigation/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-blue-api')]"
                
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"navigation-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/navigation-green-api/getNavigation/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'navigation-green-api')]"
                
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"navigation-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/getDocs/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/sendEmail/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-blue-api/sendText/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/getDocs/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/getStatusInfo/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/sendEmail/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/notification-green-api/sendText/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'notification-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"notification-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-blue-api/saveGatewayTelemetry/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"partner-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/partner-green-api/saveGatewayTelemetry/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'partner-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"partner-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/createRule/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"rule-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/deleteRule/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"rule-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/getRule/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"rule-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/getRules/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"rule-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/rule-api/updateRule/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'rule-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"rule-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/createTeam/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"team-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/deleteTeam/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"team-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/getTeam/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"team-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/getTeams/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"team-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/team-api/updateTeam/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'team-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"team-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/GET-CoreGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/getUserConfig/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/POST-CoreGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-blue-api/verifyUser/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/GET-CoreGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/getUserConfig/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/POST-CoreGraph/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/users-green-api/verifyUser/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'users-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"users-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-blue-api/validate/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-blue-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"validations-blue\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/validations-green-api/validate/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimname'), 'validations-green-api')]"
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"validations-green\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
                {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/authenticate/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/authorizer/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/bulkUpdateGroupMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/checkToken/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/configuration/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createApplication/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createGroup/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createPermission/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createRole/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/createUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteApplication/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteApplicationMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteGroup/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deletePermission/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteRole/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/deleteUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/docs/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/expirePassword/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/findUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplication/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplicationMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getApplications/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroup/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroupMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getGroups/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermission/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermissionMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getPermissions/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRole/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRoleMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getRoles/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUserInfo/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/getUsers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/ping/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/resendVerifyUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/resetPassword/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/revokeToken/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/ssoAuthorize/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/supportSsoAuthorize/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateApplication/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateApplicationMembers/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateGroup/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updatePassword/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updatePermission/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateRole/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/updateUser/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/validateReset/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/auth-api/verifyUser/policy')]",
            "dependsOn": [
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service id=\"apim-generated-policy\" backend-id=\"auth-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/create-resource/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <json-to-xml apply=\"always\" consider-accept-header=\"false\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/retrieve-header-only/policy')]",
            "dependsOn": [
                 
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n    <set-header name=\"X-My-Sample\" exists-action=\"override\">\r\n      <value>This is a sample</value>\r\n      <!-- for multiple headers with the same name add additional value elements -->\r\n    </set-header>\r\n    <jsonp callback-parameter-name=\"ProcessResponse\" />\r\n  </outbound>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('apimname'), '/echo-api/retrieve-resource-cached/policy')]",
            "dependsOn": [
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <cache-lookup vary-by-developer=\"false\" vary-by-developer-groups=\"false\">\r\n      <vary-by-header>Accept</vary-by-header>\r\n      <vary-by-header>Accept-Charset</vary-by-header>\r\n    </cache-lookup>\r\n    <rewrite-uri template=\"/resource\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n    <cache-store duration=\"3600\" />\r\n  </outbound>\r\n</policies>",
                "format": "xml"
            }
        }

    ]
}